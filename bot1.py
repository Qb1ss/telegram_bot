import re
import sqlite3
from telebot import TeleBot, types
from config import TOKEN, ADMIN_ID


bot = TeleBot(TOKEN)


# ==== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====
def init_db():
    conn = sqlite3.connect("data.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            digits INTEGER,
            email TEXT,
            comment TEXT
        )
    """)
    conn.commit()
    conn.close()


def set_field(field, user_id, value):
    conn = sqlite3.connect("data.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (user_id,))
    cursor.execute(f"UPDATE users SET {field}=? WHERE user_id=?", (value, user_id))
    conn.commit()
    conn.close()


def get_user_data(user_id):
    conn = sqlite3.connect("data.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT digits, email, comment FROM users WHERE user_id=?", (user_id,))
    data = cursor.fetchone()
    conn.close()
    return data


def get_all_users():
    conn = sqlite3.connect("data.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT user_id, digits, email, comment
        FROM users
        WHERE digits IS NOT NULL
          AND email IS NOT NULL
          AND comment IS NOT NULL
    """)
    data = cursor.fetchall()
    conn.close()
    return data


def clear_user_data(user_id):
    conn = sqlite3.connect("data.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()


# ==== –£–¢–ò–õ–ò–¢–´ ====
def reset_user(message, text="–ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞"):
    clear_user_data(message.chat.id)
    try:
        bot.clear_step_handler_by_chat_id(message.chat.id)
    except Exception:
        pass
    if text and text.strip():
        bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())


# ==== –ê–ù–ö–ï–¢–ê ====
def start_flow(message):
    if message.chat.id == ADMIN_ID:
        bot.send_message(ADMIN_ID, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É.")
        return
    reset_user(message, text="")
    bot.send_message(message.chat.id, "–ù–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", reply_markup=types.ReplyKeyboardRemove())
    snt_msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ (–æ—Ç 20 –¥–æ 150):")
    bot.register_next_step_handler(snt_msg, step_digits)


def step_digits(message):
    if not message.text or not message.text.isdigit():
        sent = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ (–æ—Ç 20 –¥–æ 150).")
        bot.register_next_step_handler(sent, step_digits)
        return
    value = int(message.text)
    if 20 <= value <= 150:
        set_field("digits", message.chat.id, value)
        sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        bot.register_next_step_handler(sent, step_email)
    else:
        sent = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ (–æ—Ç 20 –¥–æ 150).")
        bot.register_next_step_handler(sent, step_digits)


def step_email(message):
    if message.text and re.match(r"[^@]+@[^@]+\.[^@]+", message.text):
        set_field("email", message.chat.id, message.text)
        sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(sent, step_comment)
    else:
        sent = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        bot.register_next_step_handler(sent, step_email)


def step_comment(message):
    if not message.text or len(message.text) < 10:
        sent = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        bot.register_next_step_handler(sent, step_comment)
        return
    set_field("comment", message.chat.id, message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = get_user_data(message.chat.id)
    digits, email, comment = data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ß–∏—Å–ª–æ: {digits}¬≤\nEmail: {email}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å file_id –∑–∞—Ä–∞–Ω–µ–µ)
    BOT_PHOTO_ID = "https://static-cse.canva.com/blob/685034/vk1484.png"
    bot.send_photo(message.chat.id, BOT_PHOTO_ID)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                     reply_markup=types.ReplyKeyboardRemove())

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞")
    sent = bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞?", reply_markup=markup)
    bot.register_next_step_handler(sent, wait_restart)


def wait_restart(message):
    if message.text and message.text.strip().lower() == "–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞":
        start_flow(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞")
        sent = bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞¬ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã.",
                                reply_markup=markup)
        bot.register_next_step_handler(sent, wait_restart)


# ==== –ü–û–ö–ê–ó –ó–ê–Ø–í–û–ö –ê–î–ú–ò–ù–£ ====
@bot.message_handler(func=lambda m: m.chat.id == ADMIN_ID and m.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏")
def show_all(message):
    data = get_all_users()
    if not data:
        bot.send_message(ADMIN_ID, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for user_id, digits, email, comment in data:
        bot.send_message(ADMIN_ID, f"üë§ ID: {user_id}\nüìè {digits}¬≤\nüìß {email}\nüí¨ {comment}")


# ==== –ö–û–ú–ê–ù–î–´ ====
@bot.message_handler(commands=["start", "restart"])
def start_cmd(message):
    if message.chat.id == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏")
        bot.send_message(ADMIN_ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=markup)
    else:
        start_flow(message)


@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() == "–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞")
def restart(message):
    start_flow(message)


if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)
